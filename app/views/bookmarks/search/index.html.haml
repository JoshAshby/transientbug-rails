- content_for :page_title do
  Searching Bookmarks

- store_content records: store_records(@bookmarks, only: [:id, :title, :uri])

.ui.search.mobile.only
  .ui.fluid.icon.input
    = form_tag bookmarks_search_index_path, method: :get do
      = search_field_tag "q", params[:q], class: "ui prompt", placeholder: "Search Bookmarks ...", aria: { label: "search" }
    %i.search.icon

- content_for :sidebar do
  - if @bookmarks.any?
    .tb.bulk-action-menu
      = react_component "BulkActions/SelectAll", label: "Select All Bookmarks"

      = react_component "BulkActions/Header"
      = react_component "BulkActions/public/TagAll", actionUrl: bookmarks_bulk_tag_path, autocompleteUrl: bookmarks_autocomplete_index_path
      = react_component "BulkActions/public/DeleteAll", actionUrl: bookmarks_bulk_delete_path

%h1.dividing Search Results
- if @error
  = render partial: "query_error"
- elsif params[:q].blank?
  = render partial: "zero_state"
- elsif @bookmarks.empty?
  = render partial: "no_results_state"
- else
  = paginate @bookmarks

  - @bookmarks.each do |bookmark|
    = render "components/bookmark_card", bookmark: bookmark do
      = react_component "BulkActions/SelectSingle", id: bookmark.id

  = paginate @bookmarks
