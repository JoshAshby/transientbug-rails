= form_for [:admin, service_announcement], html: { class: "ui fluid form" } do |f|
  - if service_announcement.errors.any?
    .ui.message.error
      %h2= "#{ pluralize service_announcement.errors.count, "error" } prohibited this service announcement from being saved:"
      %ul
        - service_announcement.errors.full_messages.each do |message|
          %li= message

  %h4.ui.dividing.header User Facing Info 

  .required.field
    = f.label :title
    = f.text_field :title, aria: { describedby: "Service Announcement Title" }

  .required.field
    = f.label :message
    = f.text_area :message, aria: { describedby: "Service Announcement Message" }

    .ui.info.message
      %p Messages are formatted as Markdown, using the #{ link_to "Redcarpet", "https://github.com/vmg/redcarpet" } gem.

  .ui.equal.width.grid
    .ui.column
      %h5.ui.dividing.header Visual Items

      .field
        = f.label :icon
        .ui.selection.dropdown{ data: { behavior: "dropdown" } }
          = f.hidden_field :icon
          %i.dropdown.icon
          .default.text Announcement
          .menu
            - ServiceAnnouncement.icons.each do |k, v|
              .item{ data: { value: k }, class: [ service_announcement.icon == k ? "active selected" : "" ] }
                %i.icon{ class: k }
                = k.humanize.capitalize

      .field
        = f.label :color
        .ui.selection.dropdown{ data: { behavior: "dropdown" } }
          = f.hidden_field :color
          %i.dropdown.icon
          .default.text Plain
          .menu
            - ServiceAnnouncement.colors.each do |k, v|
              .item{ data: { value: k }, class: [ service_announcement.color == k ? "active selected" : "" ] }
                %i.square.icon{ class: k }
                = k.humanize.capitalize

    .ui.column
      %h4.ui.dividing.header Limits

      .ui.equal.width.relaxed.grid
        .ui.row
          .ui.column
            .ui.info.message
              %p Setting a start and end date allows the service announcement to handle the logic behind being shown and hidden automatically.
              %ul.list
                %li No starting: the announcement being visible the from the moment it is created until the end date.
                %li No end date: the announcement displays indefinitely or until manually deactivated.

        .ui.row
          .ui.column
            .field
              = f.label :start_at
              = f.datetime_field :start_at, aria: { describedby: "Service Announcement Start At" }

          .ui.column
            .field
              = f.label :end_at
              = f.datetime_field :end_at, aria: { describedby: "Service Announcement End At" }

        .ui.row
          .ui.column
            .field
              .ui.checkbox
                = f.check_box :logged_in_only
                = f.label :logged_in_only

  = f.submit "Save", class: "ui positive right floated submit button"
