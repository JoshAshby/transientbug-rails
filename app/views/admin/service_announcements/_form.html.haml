= form_for [:admin, service_announcement], html: { class: "ui fluid form" } do |f|
  - if service_announcement.errors.any?
    .ui.message.error
      %h2= "#{ pluralize service_announcement.errors.count, "error" } prohibited this service announcement from being saved:"
      %ul
        - service_announcement.errors.full_messages.each do |message|
          %li= message

  %h4.ui.dividing.header User Facing Info 

  .required.field
    = f.label :title
    = f.text_field :title, aria: { describedby: "Service Announcement Title" }

  .required.field
    = f.label :message
    = f.text_area :message, aria: { describedby: "Service Announcement Message" }

  %h5.ui.dividing.header Visual Items

  .field
    = f.label :icon
    .ui.selection.dropdown{ data: { behavior: "dropdown" } }
      = f.select :icon, options_for_select(ServiceAnnouncement.icons.keys)
      %i.dropdown.icon
      .default.text Announcement
      .menu
        - ServiceAnnouncement.icons.each do |k, v|
          .item{ data: { value: k }, class: [ service_announcement.icon == k ? "active selected" : "" ] }
            %i.icon{ class: k }
            = k.humanize.capitalize

  .field
    = f.label :color
    .ui.selection.dropdown{ data: { behavior: "dropdown" } }
      = f.select :color, options_for_select(ServiceAnnouncement.colors.keys)
      %i.dropdown.icon
      .default.text Plain
      .menu
        - ServiceAnnouncement.colors.each do |k, v|
          .item{ data: { value: k }, class: [ service_announcement.color == k ? "active selected" : "" ] }
            %i.square.icon{ class: k }
            = k.humanize.capitalize

  %h4.ui.dividing.header Limits
  .ui.info.message
    %p Setting a start and end date allows the service announcement to handle the logic behind being shown and hidden automatically.
    %ul.list
      %li A lack of a starting date will result in the announcement being visible the from the moment it is created until the end date.
      %li No end date will result in the announcement displaying indefinitely or until manually deactivated.

  .field
    = f.label :start_at
    = f.datetime_field :start_at, aria: { describedby: "Service Announcement Start At" }

  .field
    = f.label :end_at
    = f.datetime_field :end_at, aria: { describedby: "Service Announcement End At" }

  = f.submit "Save", class: "ui positive right floated submit button"
