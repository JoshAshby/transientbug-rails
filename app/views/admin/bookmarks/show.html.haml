- content_for :page_title do
  Bookmarks

= model_tag @bookmark, no_checkbox: true, only: [ :id, :title, :uri ]

.ui.menu
  = link_to bookmark_cache_index_path(@bookmark), data: { turbolinks: false }, class: "item" do
    %i.eye.icon
    view cache

  = modal_tag @bookmark, :recache, url: admin_bookmark_cache_index_path(@bookmark) do
    %i.download.icon
    recache

  .menu.right
    .ui.simple.dropdown.item
      more
      %i.dropdown.icon
      .menu
        .header
          %i.warning.sign.icon
          DANGERZONE
        .divider

        = modal_tag @bookmark, :delete, url: admin_bookmark_path(@bookmark) do
          %i.trash.icon
          delete

%h2.ui.dividing.header Internal Stuff
%table.ui.collapsing.celled.table
  %tbody
    %tr
      %td
        %b ID
      %td
        = @bookmark.id

    %tr
      %td
        %b Title
      %td
        = @bookmark.title

    %tr
      %td
        %b URL
      %td
        = @bookmark.uri.to_s

    %tr
      %td
        %b User
      %td
        = link_to @bookmark.user.username, admin_user_path(@bookmark.user)

    %tr
      %td
        %b Created At
      %td
        = @bookmark.created_at.to_s(:long)

- if @bookmark.offline_caches.any?
  .ui.equal.width.grid
    .ui.row
      .ui.column
        %h2.ui.dividing.header Last Cache Errors

        - if @bookmark.current_offline_cache.error_messages.empty?
          %p Hurray! The last cache attempt had no error messages.

        - else
          .ui.list
            - @bookmark.current_offline_cache.error_messages.each do |error_message|
              .item
                %i.warning.circle.icon
                  .content
                    .header= error_message.key
                    .description= error_message.message

      .ui.column
        %h2.ui.dividing.header Cache History

        - history_length = params.fetch(:cache_history, 5)
        %p Last cache attempts shown (max: #{ history_length })

        .ui.feed
          - @bookmark.offline_caches.order(created_at: :desc).limit(history_length).each do |offline_cache|
            .event
              .label
                %i.download.icon

              .content
                .summary
                  Recached at
                  .date= offline_cache.created_at.to_s(:long)

                .extra.text
                  .ui.list
                    - offline_cache.assets.each do |asset|
                      .item
                        %i.file.icon
                        .content
                          .header= asset.blob.metadata.dig("uri")
                          .description= asset.blob.content_type

                .meta
                  -# TODO: Make this have a way to see what the errors were
                  %i.warning.circle.icon
                  - error_count = offline_cache.error_messages.count
                  = error_count
                  = "Error".pluralize(error_count)
